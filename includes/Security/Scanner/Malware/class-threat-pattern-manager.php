<?php

namespace WP_Security\Scanner\Malware;

if ( ! defined( 'ABSPATH' ) ) {
	die( 'Direct access not permitted.' );
}

/**
 * Manages malware threat patterns and detection rules
 *
 * @package WP_Security
 * @subpackage Scanner\Malware
 * @since 1.0.0
 */
class ThreatPatternManager {
	/**
	 * Patterns for detecting malicious code
	 *
	 * @var array
	 */
	private $patterns = array();

	/**
	 * Constructor - Initialize threat patterns
	 */
	public function __construct() {
		$this->init_patterns();
	}

	/**
	 * Initialize malware detection patterns
	 */
	private function init_patterns() {
		$this->patterns = array(
			// PHP Shells and backdoors
			'php_shell'        => array(
				'name'        => 'PHP Shell',
				'regex'       => '/(?:passthru|shell_exec|system|phpinfo|base64_decode|chmod|mkdir|fopen|fclose|readfile|php_uname|eval)\s*\(.*\)/',
				'description' => 'Potential PHP shell or backdoor detected',
				'severity'    => 'critical',
			),

			// Obfuscated code
			'obfuscation'      => array(
				'name'        => 'Code Obfuscation',
				'regex'       => '/(\$[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*=[\'"]\w+[\'"]\s*;[\s\n\r]*){4,}/',
				'description' => 'Suspicious obfuscated code detected',
				'severity'    => 'warning',
			),

			// Base64 encoded PHP code
			'base64_php'       => array(
				'name'        => 'Base64 PHP Code',
				'regex'       => '/[\'"]([A-Za-z0-9+\/]{30,})[\'"]/',
				'description' => 'Base64 encoded PHP code detected',
				'severity'    => 'critical',
			),

			// Common malware functions
			'malware_func'     => array(
				'name'        => 'Malware Functions',
				'regex'       => '/(?:assert|create_function|gzinflate|str_rot13|strrev|substr|chr|ord)\s*\(/',
				'description' => 'Suspicious PHP function usage detected',
				'severity'    => 'warning',
			),

			// WordPress core file modifications
			'wp_core_mod'      => array(
				'name'        => 'Core Modification',
				'regex'       => '/add_action\s*\(\s*[\'"]wp_head[\'"]\s*,.*(?:eval|base64_decode|gzinflate)/',
				'description' => 'Suspicious WordPress core file modification',
				'severity'    => 'critical',
			),

			// SQL Injection
			'sql_injection'    => array(
				'name'        => 'SQL Injection',
				'regex'       => '/(?:UNION.*SELECT|INSERT.*INTO|UPDATE.*SET|DELETE.*FROM)\s+/',
				'description' => 'Potential SQL injection attempt detected',
				'severity'    => 'critical',
			),

			// Remote file inclusion
			'remote_file'      => array(
				'name'        => 'Remote File Inclusion',
				'regex'       => '/(?:include|require|include_once|require_once)\s*[\'"](https?|ftp):\/\//',
				'description' => 'Remote file inclusion attempt detected',
				'severity'    => 'critical',
			),

			// Malicious iframe
			'malicious_iframe' => array(
				'name'        => 'Malicious iFrame',
				'regex'       => '/<iframe.*?src=[\'"](https?:)?\/\/(?!(?:www\.)?(?:youtube\.com|vimeo\.com|dailymotion\.com)).*?[\'"]/i',
				'description' => 'Suspicious iframe detected',
				'severity'    => 'warning',
			),

			// JavaScript eval
			'js_eval'          => array(
				'name'        => 'JavaScript Eval',
				'regex'       => '/eval\s*\(.*\$.*\)/',
				'description' => 'Suspicious JavaScript eval with PHP variable',
				'severity'    => 'warning',
			),

			// Hidden content
			'hidden_content'   => array(
				'name'        => 'Hidden Content',
				'regex'       => '/<div[^>]+style=[\'"]\s*display\s*:\s*none\s*[\'"][^>]*>.*?<\/div>/i',
				'description' => 'Hidden content detected',
				'severity'    => 'warning',
			),
		);

		// Allow other plugins to add or modify patterns
		$this->patterns = apply_filters( 'wp_security_threat_patterns', $this->patterns );
	}

	/**
	 * Get all threat patterns
	 *
	 * @return array Array of threat patterns
	 */
	public function get_patterns(): array {
		return $this->patterns;
	}

	/**
	 * Get a specific threat pattern
	 *
	 * @param string $pattern_name Name of the pattern to get
	 * @return array|null Pattern array or null if not found
	 */
	public function get_pattern( string $pattern_name ): ?array {
		return $this->patterns[ $pattern_name ] ?? null;
	}

	/**
	 * Check if a file is suspicious based on patterns
	 *
	 * @param \SplFileInfo $file File to check
	 * @return bool True if file is suspicious
	 */
	public function is_suspicious_file( \SplFileInfo $file ): bool {
		// Skip non-PHP files in uploads directory
		if ( strpos( $file->getPathname(), wp_upload_dir()['basedir'] ) === 0 ) {
			return $file->getExtension() === 'php';
		}

		// Skip certain files/directories
		$skip_patterns = array(
			'/\.git/',
			'/\.svn/',
			'/vendor/',
			'/node_modules/',
			'/\.log$/',
			'/\.txt$/',
			'/\.md$/',
		);

		foreach ( $skip_patterns as $pattern ) {
			if ( preg_match( $pattern, $file->getPathname() ) ) {
				return false;
			}
		}

		// Check file extension
		$suspicious_extensions = array( 'php', 'phtml', 'php3', 'php4', 'php5', 'php7', 'pht', 'phar' );
		if ( ! in_array( strtolower( $file->getExtension() ), $suspicious_extensions ) ) {
			return false;
		}

		// Check file permissions
		$perms = $file->getPerms();
		if ( ( $perms & 0x0100 ) && ( $perms & 0x0080 ) ) { // Check if file is executable
			return true;
		}

		// Check file size
		if ( $file->getSize() === 0 || $file->getSize() > 5 * 1024 * 1024 ) { // Empty or > 5MB
			return true;
		}

		return false;
	}

	/**
	 * Add a new threat pattern
	 *
	 * @param string $name Pattern name
	 * @param string $regex Regular expression pattern
	 * @param string $description Pattern description
	 * @param string $severity Pattern severity (critical, warning, info)
	 * @return bool True if pattern was added successfully
	 */
	public function add_pattern( string $name, string $regex, string $description, string $severity = 'warning' ): bool {
		if ( isset( $this->patterns[ $name ] ) ) {
			return false;
		}

		$this->patterns[ $name ] = array(
			'name'        => $name,
			'regex'       => $regex,
			'description' => $description,
			'severity'    => $severity,
		);

		return true;
	}

	/**
	 * Remove a threat pattern
	 *
	 * @param string $name Pattern name to remove
	 * @return bool True if pattern was removed successfully
	 */
	public function remove_pattern( string $name ): bool {
		if ( ! isset( $this->patterns[ $name ] ) ) {
			return false;
		}

		unset( $this->patterns[ $name ] );
		return true;
	}
}
