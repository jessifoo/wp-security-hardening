<?php

namespace Tests\Security\Scanner\Malware;

use PHPUnit\Framework\TestCase;
use WP_Security\Scanner\Malware\MalwareDetector;
use WP_Security\Scanner\Base\ScanResult;

class MalwareDetectorTest extends TestCase {
	private $detector;
	private $test_dir;
	private $quarantine_dir;

	protected function setUp(): void {
		parent::setUp();

		// Create test directory structure
		$this->test_dir = sys_get_temp_dir() . '/wp_security_test_' . uniqid();
		mkdir( $this->test_dir );

		// Create test files
		$this->createTestFiles();

		// Initialize detector with mocked logger
		$logger         = $this->createMock( \WP_Security_Logger::class );
		$this->detector = new MalwareDetector( $logger );

		// Define quarantine directory
		$this->quarantine_dir = $this->test_dir . '/quarantine';
		if ( ! file_exists( $this->quarantine_dir ) ) {
			mkdir( $this->quarantine_dir );
		}

		// Define WordPress constants for testing
		if ( ! defined( 'ABSPATH' ) ) {
			define( 'ABSPATH', $this->test_dir . '/' );
		}
		if ( ! defined( 'WP_SECURITY_PLUGIN_DIR' ) ) {
			define( 'WP_SECURITY_PLUGIN_DIR', $this->test_dir . '/' );
		}
	}

	protected function tearDown(): void {
		// Clean up test files
		$this->removeDirectory( $this->test_dir );
		parent::tearDown();
	}

	public function testScanForZeroByteFiles(): void {
		$result = $this->detector->scan_for_zero_byte_files();

		$this->assertInstanceOf( ScanResult::class, $result );
		$this->assertTrue( $result->isCompleted() );

		$threats = $result->getThreats();
		$this->assertCount( 2, $threats, 'Should detect both zero-byte PHP file and suspicious named file' );

		$metadata = $result->getMetadata();
		$this->assertArrayHasKey( 'files_checked', $metadata );
		$this->assertArrayHasKey( 'files_quarantined', $metadata );
		$this->assertEquals( 2, $metadata['files_quarantined'] );
	}

	public function testExcludedDirectoriesAreSkipped(): void {
		// Create test file in vendor directory
		$vendor_dir = $this->test_dir . '/vendor';
		mkdir( $vendor_dir );
		file_put_contents( $vendor_dir . '/test.php', '' );

		$result  = $this->detector->scan_for_zero_byte_files();
		$threats = $result->getThreats();

		// Should not detect the zero-byte file in vendor directory
		foreach ( $threats as $threat ) {
			$this->assertStringNotContainsString( '/vendor/', $threat['file'] );
		}
	}

	public function testObfuscatedContentDetection(): void {
		$obfuscated_file = $this->test_dir . '/obfuscated.php';
		file_put_contents( $obfuscated_file, '<?php eval(base64_decode("malicious_code")); ?>' );

		$result  = $this->detector->scan_for_zero_byte_files();
		$threats = $result->getThreats();

		$found_obfuscated = false;
		foreach ( $threats as $threat ) {
			if ( strpos( $threat['file'], 'obfuscated.php' ) !== false ) {
				$found_obfuscated = true;
				break;
			}
		}

		$this->assertTrue( $found_obfuscated, 'Should detect file with obfuscated content' );
	}

	private function createTestFiles(): void {
		// Create a zero-byte PHP file
		file_put_contents( $this->test_dir . '/empty.php', '' );

		// Create a suspicious named file
		file_put_contents( $this->test_dir . '/a1b2c3d4.php', '<?php echo "test"; ?>' );

		// Create a legitimate PHP file
		file_put_contents( $this->test_dir . '/legitimate.php', '<?php echo "Hello World"; ?>' );

		// Create a legitimate JS file
		file_put_contents( $this->test_dir . '/script.js', 'console.log("test");' );
	}

	private function removeDirectory( string $dir ): void {
		if ( ! file_exists( $dir ) ) {
			return;
		}

		$files = array_diff( scandir( $dir ), array( '.', '..' ) );
		foreach ( $files as $file ) {
			$path = $dir . '/' . $file;
			is_dir( $path ) ? $this->removeDirectory( $path ) : unlink( $path );
		}
		rmdir( $dir );
	}
}
